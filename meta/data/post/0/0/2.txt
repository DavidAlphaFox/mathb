Date: 2012-03-25 00:00:00 +0000
Title: Get Started
Name:

Inline Mathematics
------------------

Inline mathematics can be written in two ways.
They can be enclosed within \begin{md}`$`\end{md}
and \begin{md}`$`\end{md}, or
\begin{md}`\(`\end{md} and \begin{md}`\)`\end{md}.
For example, typing `$ e^{i \pi} + 1 = 0 $` or `\(
e^{i \pi} + 1 = 0 \)` in the code pane produces
the following output in the output pane: $ e^{i
\pi} + 1 = 0 $.


Displayed Mathematics
---------------------

Displayed mathematics appears on its own line in
the output. To render displayed math, they can be
enclosed within \begin{md}`$$`\end{md} and
\begin{md}`$$`\end{md}, or \begin{md}`\[`\end{md}
and \begin{md}`\]`\end{md}. For example, typing
`$$ e^{i \pi} + 1 = 0. $$` or `\[ e^{i \pi} + 1 =
0. \]` in the code pane produces the following
output in the output pane: $$ e^{i \pi} + 1 = 0.
$$ Apart from this, many LaTeX environments such
as `equation`, `align`, etc. are also supported.


Text
----

Mathematics and text can be mixed freely while
posting a mathematics snippet. Text is written in
Markdown format. As you can see, this tutorial
itself is another post, so you can compare the
code in the code pane with the output in output
pane as you read this tutorial. A new paragraph
begins by placing a blank line in the code.

This is a new paragraph. Check the code pane on to
ensure that there indeed is a blank line between
this paragraph and the previous one.

A code fence can be created by writing three
consecutive backticks (` ``` `) on its own line.
Code blocks are placed between two code fences:

```
#include <stdio.h>

int main(int argc, char **argv)
{
    printf("hello, world\n");
}
```

Ordered lists can be written by numbering each
line:

  1. Apple
  2. Mango
  3. Banana

Unordered lists can be written by using an
asterisk (`*`), plus sign (`+`), or minus sign
(`-`) as bullet for each item in the list:

  - Apple
  - Mango
  - Banana

Enclose text within a pair of asterisks to
*emphasize* it. Enclose text within a pair of
double-asterisks to **emphasize it strongly**.
Underscores may be used instead of asterisks to
add emphasis too.

Various other features are supported in Markdown
such as inline code, blockquotes, horizontal
rules, etc. This website conforms to GitHub
Flavoured Markdown (GFM) specification. Note that
GFM is a strict superset of CommonMark.


LaTeX
-----

This website uses [MathJax][M1] to render
mathematics on the web browser. See [MathJax:
Supported TeX/LaTeX commands][M2] for a list of
LaTeX commands supported by MathJax.


Markdown
--------

This website supports GitHub Flavoured Markdown
(GFM). GFM is a strict superset of the CommonMark
specification of Markdown. See the [GitHub
Flavoured Markdown Specification][G1] for more
details on the specification.


TeXMe
-----

This website uses [TeXMe][T1] to allow mixing
LaTeX with Markdown. TeXMe reads the input and
renders it while preventing the Markdown renderer
from seeing the LaTeX code, so that the LaTeX code
remains intact for rendering by MathJax.

However, when Markdown code contains mathematics
delimiters like \begin{md}`$`\end{md},
\begin{md}`\(`\end{md}, etc., TeXMe may identify
them as mathematics instead of Markdown code as
intended. To prevent mathematics delimiters in
Markdown code from being interpreted as LaTeX,
enclose the Markdown code within
\begin{mdx}`\begin{md}`\end{mdx} and
\begin{mdx}`\end{md}`\end{mdx}. Here's an example:

\begin{mdx}
```
> The variables \begin{md}`$foo`\end{md} and
> \begin{md}`$bar`\end{md} are metasyntactic
> variables.
```
\end{mdx}

Here is how the above code is rendered in the output:

> The variables \begin{md}`$foo`\end{md} and
> \begin{md}`$bar`\end{md} are metasyntactic
> variables.

See [TeXMe: Markdown Priority Environment][T2] to
learn more about this.


Print
-----

While the primary purpose of this website is to
allow users to write mathematical snippets, save
them, and share a link to them with others, the
stylesheet used in this website takes special care
to allow printing beautifully rendered pages to
paper or PDF.

When a page from this website is printed, only the
rendered content appears in the print. The input
form, buttons, navigation links, and other user
interface elements do not appear in the print.


Save PDF
--------

It is possible to turn a post on this website into
a PDF file using the printing facility of most web
browsers running on a desktop or laptop. The exact
steps to save a web page as PDF vary from browser
to browser but the steps to do so roughly look
like this:

- Select File > Print from the web browser menu.
- Then in the print window or dialog box that
  comes up, deselect/disable the options to print
  headers and footers.
- Finally, choose the option to save a PDF.

You can try the above steps right now with this
page and save this page as PDF.

If everything works as expected, the saved PDF
should contain only the rendered content with all
mathematical formulas rendered properly. This
website has special styling rules to ensure that
the input form, buttons, navigation links, and
other user interface elements do not appear in
saved PDF.


[M1]: http://www.mathjax.org/
[M2]: https://docs.mathjax.org/en/latest/input/tex/macros/
[G1]: https://github.github.com/gfm/
[T1]: https://github.com/susam/texme#texme
[T2]: https://github.com/susam/texme#markdown-priority-environment
